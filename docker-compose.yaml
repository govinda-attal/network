version: "3.7"

networks:
  private:
  neo:

services:
  traefik:
    container_name: traefik
    hostname: traefik
    image: traefik:v1.7.21
    labels:
      - traefik.frontend.rule=Host:proxy.neo.com
      - traefik.port=80
    networks:
      private:
      neo:
        aliases:
          - proxy.neo.com
    ports:
      - "80:80"
      - "9080:9080"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./proxy/traefik.toml:/traefik.toml
      - ./certs/:/certs/

  id:
    container_name: id
    hostname: id
    image: cloudfoundry/uaa
    labels:
      - traefik.backend=id
      - traefik.enable=true
      - traefik.frontend.rule=Host:id.neo.com
      - traefik.docker.network=private
      - traefik.port=8080
      - traefik.default.protocol=http
    # ports:
      # - 8080:8080
    volumes:
      - ./configs/uaa.yml:/uaa/uaa.yml
      - ./configs/log4j2.properties:/etc/config/log4j2.properties
    environment:
      UAA_CONFIG_PATH: /uaa
      JAVA_OPTS: -Djava.security.egd=file:/dev/./urandom -Dlogging.config=/etc/config/log4j2.properties -Dlog4j.configurationFile=/etc/config/log4j2.properties
    depends_on:
      - database
    networks:
      private:
        aliases:
          - id.neo.com
  uaac:
    container_name: uaac
    hostname: uaac
    image: governmentpaas/cf-uaac
    command: sleep 36000
    networks:
      private:

  uaa-ui:
    container_name: uaa-ui
    hostname: uaa-ui
    image: gattal/uaa-ui
    labels:
      - traefik.backend=uaa-ui
      - traefik.enable=true
      - traefik.frontend.rule=Host:uaa-ui.neo.com
      - traefik.docker.network=private
      - traefik.port=8080
      - traefik.default.protocol=http
    networks:
      private:
        aliases:
        - uaa-ui.neo.com
  
  database:
    container_name: database
    hostname: database
    image: postgres:alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - 7432:5432
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      private:
        aliases:
          - database.neo.com
          - database.neo
          - database
  
  cassandra:
    image: bitnami/cassandra:latest
    container_name: cassandra
    hostname: cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 5s
      timeout: 5s
      retries: 60
    environment:
      JVM_OPTS: -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=2
      CASSANDRA_HOST: cassandra
      CASSANDRA_SEEDS: cassandra
      CASSANDRA_CLUSTER_NAME: NEO
      CASSANDRA_USER: cassandra
      CASSANDRA_PASSWORD: cassandra
      CASSANDRA_CGROUP_MEMORY_LIMIT: "true"
    ports:
      - "9042:9042"  # Expose native binary CQL port for your apps
    networks:
      private:
        aliases:
          - cassandra.neo.com
          - cassandra.neo
          - cassandra
  
  cassandra-ui:
    hostname: cassandra-ui
    container_name: cassandra-ui
    image: ipushc/cassandra-web
    restart: always
    environment:
      HOST_PORT: 0.0.0.0:8080
      CASSANDRA_HOST: cassandra
      CASSANDRA_PORT: 9042
      CASSANDRA_USERNAME: cassandra
      CASSANDRA_PASSWORD: cassandra
    labels:
      - traefik.backend=cassandra-ui
      - traefik.enable=true
      - traefik.frontend.rule=Host:cassandra-ui.neo.com
      - traefik.docker.network=private
      - traefik.port=8080
      - traefik.default.protocol=http
    networks:
      private:
        aliases:
          - cassandra-ui.neo.com
    depends_on:
      - cassandra

  adminer:
    hostname: adminer
    container_name: adminer
    image: adminer
    restart: always
    labels:
      - traefik.backend=adminer
      - traefik.enable=true
      - traefik.frontend.rule=Host:adminer.neo.com
      - traefik.docker.network=private
      - traefik.port=8080
      - traefik.default.protocol=http
    networks:
      private:
        aliases:
          - adminer.neo.com

  zoo:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zoo
    container_name: zoo
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zoo:22888:23888"
    restart: on-failure
    networks:
      private:
        aliases:
          - zoo

  kafka:
    image: confluentinc/cp-kafka:6.1.1
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zoo
    restart: on-failure
    networks:
      private:
        aliases:
          - kafka.neo
          - kafka.neo.com

  kowl:
    image: quay.io/cloudhut/kowl:v1.2.2
    restart: on-failure
    hostname: kowl
    container_name: kowl
    volumes:
    - ./configs/kowl-config.yaml:/etc/kowl/config.yaml
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    labels:
      - traefik.backend=kowl
      - traefik.enable=true
      - traefik.frontend.rule=Host:kowl.neo.com
      - traefik.docker.network=private
      - traefik.port=8080
      - traefik.default.protocol=http
    depends_on:
      - kafka
    networks:
      private:
        aliases:
          - kowl